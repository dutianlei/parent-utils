<?xml version="1.0" encoding="UTF-8"?>
<!--
    configuration属性说明：
        scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
            当scan为true时，此属性生效。默认的时间间隔为1分钟。
        debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<!--<configuration scan="true" scanPeriod="60 seconds" debug="false"> -->
<configuration debug="false" scan="true">
    <!-- 定义常量 ，下面可以引用  -->
    <!-- <property name="LOG_HOME" value="LOG" />log目录
    <property name="BACKUP_HOME" value="${LOG_HOME}/backup" />日志备份目录 -->
    <appender name="ONE2ONE" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator>
            <Key>fileName</Key>
            <DefaultValue>city</DefaultValue>
        </discriminator>

        <sift>
            <appender name="appendername" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <File>${fileName}.log</File>

                <!--当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类-->
                <!--TimeBasedRollingPolicy:最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。-->
		        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!--日志文件输出的文件名-->
                    <FileNamePattern>
                      ${fileName}_%d{yyyy-MM-dd}_%d{HHmmss}-%i.log
                    </FileNamePattern>
                    <MaxHistory>2</MaxHistory>
                    <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <MaxFileSize>10MB</MaxFileSize>
                    </TimeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
                <encoder>
                    <pattern>
                       %msg %n
                    </pattern>
					<immediateFlush>true</immediateFlush><!-- 可以提高日志吞吐量  -->
					<outputPatternAsHeader>true</outputPatternAsHeader> 
                </encoder>
            </appender>
        </sift>
    </appender>
    <!--控制台输出-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>%msg %n</Pattern>
        </encoder>
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
        <!--&lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
        <!--</encoder>-->
    </appender>
    <logger name="org.springframework" level="warn" />
    <logger name="net.sf.ehcache" level="info"/>
	<logger name="org.apache.commons.configuration" level="info"/>
    <logger name="java.sql.Connection" level="debug" />
	<logger name="java.sql.Statement" level="debug" />
	<logger name="java.sql.PreparedStatement" level="debug" />
    <!-- 设置根 的日志级别 -->
    <root level="debug">
        <!-- 不要忘记了对于appender的 引用 根元素是配置文件的入口 -->
        <appender-ref ref="ONE2ONE" />
		<appender-ref ref="CONSOLE"/> <!-- 把>=info级别的日志都输出到控制台 -->
    </root>
</configuration>